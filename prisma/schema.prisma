// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects  Project[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sites       Site[]
  scenarios   Scenario[]
  zoningRules ZoningRules[]
  
  @@map("projects")
}

model Site {
  id          String   @id @default(cuid())
  name        String
  area        Float    // in square meters
  areaHa      Float    // in hectares
  location    String?
  constraints String?  // JSON string for constraints
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lots        Lot[]
  
  @@map("sites")
}

model ZoningRules {
  id           String   @id @default(cuid())
  name         String
  kdb          Float    // Building coverage percentage
  klb          Float    // Floor Area Ratio (FAR)
  heightLimit  Float    // Maximum height in meters
  heightFloors Int?     // Maximum height in floors
  openSpace    Float    // Minimum open space percentage
  projectId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scenarios    Scenario[]
  
  @@map("zoning_rules")
}

model Scenario {
  id           String   @id @default(cuid())
  name         String
  description  String?
  version      String   // e.g., "v1", "v2", "alt-plan"
  projectId    String
  zoningRulesId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  zoningRules  ZoningRules?  @relation(fields: [zoningRulesId], references: [id])
  lots         Lot[]
  buildings    Building[]
  compliance   ComplianceResult[]
  reports      OutputReport[]
  
  @@map("scenarios")
}

model Lot {
  id          String   @id @default(cuid())
  name        String
  area        Float    // in square meters
  geometry    String?  // GeoJSON or simple geometry data
  landUseType String   // 'residential', 'commercial', 'office', 'park', 'road', etc.
  siteId      String
  scenarioId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  buildings   Building[]
  
  @@map("lots")
}

model Building {
  id           String   @id @default(cuid())
  name         String?
  buildingType String   // 'tower', 'podium', 'mid-rise', etc.
  floors       Int
  height       Float    // in meters
  footprint    Float    // in square meters
  gfa          Float    // Gross Floor Area
  lotId        String
  scenarioId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  lot          Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  scenario     Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  
  @@map("buildings")
}

model ComplianceResult {
  id            String   @id @default(cuid())
  scenarioId    String
  kdbCompliance Boolean
  klbCompliance Boolean
  heightCompliance Boolean
  openSpaceCompliance Boolean
  details       String?  // JSON string with detailed results
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  scenario      Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  
  @@map("compliance_results")
}

model OutputReport {
  id          String   @id @default(cuid())
  name        String
  type        String   // 'pdf', 'csv', 'image'
  content     String?  // URL or base64 content
  metadata    String?  // JSON string with report metadata
  scenarioId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  
  @@map("output_reports")
}